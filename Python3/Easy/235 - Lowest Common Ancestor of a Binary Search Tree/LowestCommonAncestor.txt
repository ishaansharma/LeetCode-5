235. Lowest Common Ancestor of a Binary Search Tree

  Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

  According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p 
  and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”


Time Complexity - O(h), where h is the height of the tree
Space Complexity - O(1)

Thought Process
- I have to find the least common ancestor of two given nodes.
- The current node has to be in between the two nodes for it to be
its ancestor.
  - If the condition above is valid, I can return the current node.
- While traversing through the tree, I have to check if the given
node is smaller or greater than the current node.
  - If the value of the given node is smaller than the current node,
  I know that I need to find a smaller value for the current node,
    - I can use recursion to move to the left of the graph.
  - Otherwise, move to the right of the graph, because the value of
  the given node is greater than the current node.
  
