703. Kth Largest Element in a Stream

  Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.

  Implement KthLargest class:

  KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.
  int add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.

  Constraints:

  1 <= k <= 104
  0 <= nums.length <= 104
  -104 <= nums[i] <= 104
  -104 <= val <= 104
  At most 104 calls will be made to add.
  It is guaranteed that there will be at least k elements in the array when you search for the kth element.


Thought Process
- For this question, I can use a heap to find the kth largest element.
  - Why should I use a heap?
    - Adding in a array is O(n), but adding in a heap is O(logn).
 
 Init
 - Initialize min heap with size 'k'.
    - If the length of min heap is greater than 'k', I can pop the smallest element of minHeap.
 
 Add
 - While adding, I need to keep in mind that the heap might be empty.
   - I can push the value in my heap.
   - If the length of my heap is greater than 'k', I can pop the smallest value from my heap.
   - I can return the first value in my heap, since that value would be the kth largest element.
      -> Smallest to Largest


Time Complexity 
Init - O(n-k logn) -> O(nlogn), where n is the length of the heap and k is the amount of values that I have to pop
Add - O(logn), where n is the length of the heap
Space Complexity - O(n), where n is the length of the heap
