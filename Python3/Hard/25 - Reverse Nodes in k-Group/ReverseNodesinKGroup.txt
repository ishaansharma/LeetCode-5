25. Reverse Nodes in k-Group

Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. 
If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.


Time Complexity - O(n)                      Space Complexity - O(1)

Thought Process
- To solve this question, there are three important steps for each portion of the list k at a time.
  - Find the kth node
  - Reverse the nodes 
  - Connect the reversed linked nodes together to the next portion


Example
- Say I have a linked list, 1 -> 2 -> 3 -> 4 -> 5 and k = 2.
- First, I want to find the kth node.
  - I want to find the node at which k = 2.
    - The node is 2. 
- Second, I want to reverse the nodes up to node 2.
  - The current portion of the linked list is 1 -> 2.
  - The portion that I get after reversing the linked list is
  1 <- 2.
- Third, I want to move the nodes in the portion such that the arrows 
are pointing to the right.
  - After moving the nodes, my result is now 2 -> 1. 

- Now, I want to repeat this process with the rest of the linked list.
  - The completed second portion of the linked list would be 4 -> 3.
  - Now, I want to connect the first portion and connect it to the second 
  portion.
    - Connect 1 to 4.
  - The current linked list that I have now is 2 -> 1 -> 4 -> 3.

- Since there is the amount of nodes left is less than k, I don't have to do 
anything and I can return the linked list.
  - My final linked list is 2 -> 1 -> 4 -> 3 -> 5.
