153. Find Minimum in Rotated Sorted Array

Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.


Time Complexity - O(logn)                     Space Complexity - O(1)

Thought Process
- I want to find the minimum number in a rotated sorted array.
- I can use two pointers.
  - left pointer 'l' and right pointer 'r'
  - middle pointer 'm' (l + r) // 2
- I want to find the portion where the array is sorted.
  - If the portion of the array is sorted, which I can find out
  by checking if the value at the left index is less than the value at the right index,
    - I can check if it is smaller than the minimum value, 'minNum'.
      - If so, set 'minNum' to nums[l].
- I want to check every iteration if 'minNum' is less than the value at the 'm' index.
- If the value at the left index is less than or equal to the value at the middle index, 
  - this means that the array is rotated to the left, so I want to move my left pointer to 
  the right of middle by one.
- If the value at the left index is greater than the value at the middle index, 
  - this means that the array is rotated to the right, so I want to move my right pointer
  to the left of middle by one.
- After breaking out of the while loop, I can return the minimum value, 'minNum'.
