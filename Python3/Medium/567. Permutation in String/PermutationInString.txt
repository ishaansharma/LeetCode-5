567. Permutation in String

Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
In other words, return true if one of s1's permutations is the substring of s2.

Time Complexity - O(26 * n) -> O(n)
Space Complexity - O(n)


Thought Process
- I want to check if s2 contains a permutation of s1.
  - What is a permutation?
    - In this context, it will be an rearrangement of characters in a definite order.
- Before everything else, I want to first check if the length of s1 is less than s2,
  because the entirety of s1 has to be in s2. If not, return False.
- First, since I am checking if s1 appears in s2, I can use a list or a hashmap to record
how many times a character has appeared.
  - I will first initialize two lists for s1 and s2 with 26 positions.
    - [0] * 26
    - I can use ASCII to convert a character to a position from 0 to 26.
      - ord(char) - ord('a')
  - I can iterate through the length of the first string.
    - Add one to the value of the character in both lists.
      - For example, say string 1 is "abc" and string 2 is "def".
        - I would want to iterate through the length of string 1. Add one to the list at
        index zero.
          - List1: [1, 0, 0...], List2: [0, 0, 0, 1, 0, 0, 0...]
          - Continue iterating through the for loop and do the same operations.
  - I want to make a new variable called matches.
    - This variable will record how many matches between list1 and list2.
      - If the amount of matches between these lists are equal to 26, then return true.
      Matches is how much times the values of each list are equal to each other. Since there
      are 25 indexes (including zero), we want to compare all the values to see if they are equal.
        - If they are equal, this would mean that string 1 is a substring of string 2.
      - Add one to matches if both of the values of the two lists are equal to each other.
  - I can start iterating through the for loop that starts at length of string1 to the length
  of string2. 
    - Why am I starting at string1?
       - In the first and second loop, I have already set up the values of the first 'x' length
       of string 1, as well as the amount of matches it already has.
    - Before using two pointers, I want to first check every single time the for loop iterates if
    the value of 'matches' is equal to 26. If so, return True.
    - Two Pointers
      - One pointer will be left (l), which will be first set equal to 0. The second pointer will be 
      right (r), which will be used to iterate through the for loop.
    - Since we are iterating through the for loop, I can add one to the value to the character at the 
    'r'th position.
      - If the value of the character at the 'r'th position of the second list is equal to the value
      in the first list,
        - Add one to matches.
      - Else if the value of the character at the 'r'th position of the first list is one greater than
      the value of the character of the second list,
        - This means that the value of the character in the first list was previously equal to the value
        of the character in the second list.
          - Subtract 'matches' by one, since they are no longer equal to each other.
    - Using the same idea as the bullet point above, now I want to check the character at index 'l'.
      - This is the letter that we will be deleting, since we are iterating through the for loop
      while making sure that r - l + 1 is equal to the length of the first string.
      - If the value of the character at the 'l'th position of the first list is equal to the value 
      of the second list, I can add one to results.
      - Else if the value of the character at the 'l'th position of the first list is one less than the value
      of the second list, this means that the value of the character of the first list was previously
      equal to the value of the character of the second list.
        - Subtract one from matches.
    - Add one to the left pointer. 
  - After breaking through the for loop, I can return matches.
    - However, I have to make sure that matches is equal to 26, because there is a case that after the last
    iteration of the for loop and the condition that matches is equal to 26 haven't been checked.
      - To solve this case, I can 'return matches == 26'.
        
