78. Subsets


  Given an integer array nums of unique elements, return all possible subsets (the power set).

  The solution set must not contain duplicate subsets. Return the solution in any order.
  
  Constraints:
  1 <= nums.length <= 10
  -10 <= nums[i] <= 10
  All the numbers of nums are unique.

Thought Process
- Since this was my first time solving a subset problem, what helped me understand the process
was by drawing a diagram. The diagram is shown below.
- I want to start off with a empty subset. Everytime I reach the bottom of the diagram (which I can
do using DFS), I want to append my subset to my result variable, 'res'.
  - An important note is that I store the subset as an copy, not the subset itself.
    - Why?
      - I do not want a direct reference to the subset itself that is constantly being modified, 
      but rather a copy of the subset.
- To move back up in the tree, I can pop the last value.
- After checking through all possible subsets, I can return the result variable, 'res'.


Here is a simple diagram for example question: [1,2,3]
 []                                        []
 [1]                     [1]                               []   
 [2]                [1,2]  |  [1]                  [2]     |     []
 [3]          [1,2,3] | [1,2]  [1,3] | [1]     [2,3] | [2]    [3] | []
 
 Time Complexity -> O(n 2^n), because there are 2^n different subsets and n would be the copy of the subset.
 Space Complexity -> O(n), because I have to call the function 'n' times before I get a result.
  -> n is equal to the amount of unique elements
 
