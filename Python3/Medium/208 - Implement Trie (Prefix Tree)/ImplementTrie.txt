208. Implement Trie (Prefix Tree)

  A trie (pronounced as "try") or prefix tree is a tree data structure used to efficiently store 
  and retrieve keys in a dataset of strings. There are various applications of this data structure, 
  such as autocomplete and spellchecker.

  Implement the Trie class:
  Trie() Initializes the trie object.
  void insert(String word) Inserts the string word into the trie.
  boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.  
  boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.
  
  Constraints:

  1 <= word.length, prefix.length <= 2000
  word and prefix consist only of lowercase English letters.
  At most 3 * 104 calls in total will be made to insert, search, and startsWith.

Thought Process
  - Create a new class called TrieNode.
    -> This will be used to check if each letter branches off (self.children) and when a word ends (self.end).

  Insert
  - Have a pointer that will start at root.
    - The root is like a placeholder which will branch off into starting letters.
  - For each letter of the word I want to insert, I want to check if the letter is already in the trie.
    - If it is not, I can create a new node.
  - Then, I can move my current pointer to the next node.
  - When I completely inserted the word in my trie, I want to set 'self.end' to True, meaning that the word
  is now complete.

  Search
  - Have a pointer that will start at root.
  - For each letter of the word I want to search, I want to check if the letter is NOT in the trie.
    - If it is not, I can return False.
  - Then, I can move my current pointer to the next node.
  - When I completely searched for the word in my trie, I can return 'self.end'.
    - If 'self.end' is False, that means that I reached a partial match of the word.
    - If 'self.end' is True, that means that I reached a full match of the word.
 
  StartsWith
  - This process is similar to the search function.
  - Have a pointer that will start at root.
  - For each letter of the word I want to search, I want to check if the letter is NOT in the trie.
    - If it is not, I can return False.
  - Then, I can move my current pointer to the next node.
  - When I completely searched for the word in my trie meaning that the prefix is in the trie, I can return True.

What is the Time and Space Complexity?
  Time Complexity -> O(m*n) for insert and O(n) for search
  Space Complexity -> O(m*n)
    -> m is the max length
    -> n is the amount of words
