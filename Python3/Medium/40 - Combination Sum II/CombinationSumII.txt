40. Combination Sum II
  
  Given a collection of candidate numbers (candidates) and a target number (target), 
  find all unique combinations in candidates where the candidate numbers sum to target.
  Each number in candidates may only be used once in the combination.
  Note: The solution set must not contain duplicate combinations.
  
  Constraints:
  1 <= candidates.length <= 100
  1 <= candidates[i] <= 50
  1 <= target <= 30

Thought Process
- This question is similar to Subsets II.
- To solve this question, I will need to use recursive backtracking.
- For each element in the integer array nums,
  - I want to add the element to my current subset.
  - I will add the value of the current number to my sum variable, 'total'.
  - Then, I will use recursion to continue from 'i + 1' and 'total'.
  - After finding all possible subsets for the element, I want to backtrack
  by popping the most recent value from my current subset.
- If the sum is equal to the target, I can append my current subset to the result
variable, 'res'.
- To check if it is out of bounds,
  - I can check if 'i' is greater than the length of 'nums'.
  - I can check if my sum is greater than the target.
- To avoid duplicate subsets, after I find the combination for 'x', I want
to skip all future occurences of 'x'.
  - To skip all future occurences of 'x', I want to sort the integer array nums in ascending order.

Time Complexity - O(n*2^n)
